## Usage 

The following example should demonstrate the usage of Customize and the `files` 
io-helper. Consider the following file tree

{{{dirtree 'examples/file-example' ''}}}

### Creating an engine

The first thing we need, is an engine. For now, we create an engine that just
concatenates the contents of all files in a directory. We put this engine into
the file `engine-concat-files.js` 

{{{example 'examples/file-example/engine-concat-files.js'}}}

* The engine provides an empty default configuration. This configuration is used 
  as long as no `.merge` and `.load` function is called. 
* The `preprocessor` of the engine assumes that the input configuration for this
  engine a path to a directory. It then uses the `files` io-helper to convert 
  this path into an object of lazy promises.
* The `run`-function concatenates the contents of the files. It returns 
  an object 

  ```js
    { "filename.txt": "contents", ... } 
  ```

  output file. The module {{npm 'customize-write-files'}} can be used to 
  write such files to disk in a node environment. In order to this to work, 
  the contents must either be a string, a buffer or a [raadable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable).
  Strings will be stored in `utf-8` encoding.

### Loading a configuration

In order to see, how the preprocessor and the `files`-helper works, we can display 
the configuration after a merge:

{{{example 'examples/file-example/example-build.js'}}}

The example creates a new Customize-instances, registers our engine under the name 
`files` and provides the path to a directory as configuration for the `files` engine 
(i.e. as property `files` within the configuration object). It then uses the 
`.build` function convert all nested promises to a single promise for the whole
config. This example prints the following result.

{{{exec 'node example-build.js' cwd='examples/file-example/' lang='js'}}}

We can see that the `files`-call of the preprocessor converted the directory path into 
an object containing a one property for each file in the directory.

### Running the engine 

So far, we have loaded and displayed the preprocessed configuration. Now replace the 
`.build()`-call by `.run()`

{{{example 'examples/file-example/example1.js'}}}

The engines `run()`-method will now be executed with the resolved configuration,
which yields the following output:

{{{exec 'node example1.js' cwd='examples/file-example/'}}}

### Merging another configuration

We now have a working customizable configuration. The only thing we have not tried 
yet is to customize it. We are going to assume that someone, maybe Bob, wants to reuse 
the configuration for my own purposes, because he really likes it, and it really does 
exactly what he was looking for. Almost... Except, that the contents of the first file (`a.md`) 
needs to be replace by something else. In reality this might be a Handlebars partial to include 
different contents, or an additional Less-file that changes some styles to follow Bob'
company's style-guide.

We can do this, by merging another configuration, but let's have a look at the directory
tree before doing this:

{{{dirtree 'examples/file-example' ''}}}

You can see that the second directory contains a file `a.md`. We will use this file to
replace the file of the first directory.

{{{example 'examples/file-example/example2.js'}}}

There is an additional call to `.merge` in this code. Its input is also passed to the 
engine's preprocessor, so now we get two objects containing files and their contents 
and those are merged by the [`.merge`-function of the lodash library](https://lodash.com/docs#merge),
so that in the above example, the property `a.md` is replace by the value in the 
second configuration. So the output of this example is

{{{exec 'node example2.js' cwd='examples/file-example/'}}}

### Advanced usage

This is the essence of `customize`. Actually, things are a bit more complicated. 
A custom overrider ensures (in this order)

* that nested objects can provide there own overrider function in a `_customize_custom_overrider`-property,
* that array-values are concatenated rather than replaced
* and that promises are correctly merged.

Finally, the `.files()`-helper does not return the file contents directly. It returns a promise for the 
file contents. This promise is lazy and only evaluated when the `.then()`-method is called. And it uses the 
`Customize.leaf()` method to attach custom overrider, so that a file-promise replaces its predecessor
without `.then()` being called. 
This means that files, whose contents is overridden by other files, are *not* opened for reading.

### Application of the principles

Currently, there is only the {{{npm 'thought'}}} package uses customize, but {{{npm 'bootprint'}}} uses the same principle.

In `thought` the `.thought/partials` directory is included to allow the user to override default Handlebars-partials with
custom verison.

In `bootprint` the user can create packages with Handlebars-partials and Less-definitions, which include and override 
partials and definitions from other packages.








